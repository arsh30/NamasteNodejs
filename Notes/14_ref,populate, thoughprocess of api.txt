In previous lecture, we learnt how to send the connections request from one user to another, either he can intersted or ignored the profile 
this is sender side of profile 

In this lecture we are working on reciever end, means review the request, either we can accepted or reject 

------------------------------------------------

requestRouter.post(
  "/request/review/:status/:requestId",
  userAuth,
  async (req, res) => {
    try {
      const loggedInUser = req.user;
      const { status, requestId } = req.params;

      const allowedStatus = ["accepted", "rejected"];
      if (!allowedStatus.includes(status)) {
        throw new Error("Invalid Status");
      }

      const connectionRequest = await ConnectionRequest.findOne({
        _id: requestId, // jo Object create hua hai basically when we create the ID
        toUserId: loggedInUser._id, // jisko bhji hai request vo loggedIn hona chaiye
        status: "interested",
      });

      if (!connectionRequest) {
        throw new Error("Connection Request Not Found");
      }

      connectionRequest.status = status;

      const data = await connectionRequest.save();

      res.status(201).json({
        message: "Connection Request " + status,
        data,
      });

      /*
      1. always whenever write the logic for api calls, make sure to cover all the corner cases, in your head, you are clear, 
      what you are going to write. and have you cover the corner cases as well.

      0) validate the status
      Eg: akshay send the connection request to elon
      1.1) Is Elong loggedIn user (because akshay ne send kri thi elon ko to elon reviw krra hai) (loggedIN = toUserId) 
      1.2) status  = interested (ignored ke case me kuch nahi kar skte, means vo undo nahi hoga)
      1.3) requestID should be valid

      */
    } catch (error) {
      res.status(400).send("Error: " + error.message);
    }
  }
);


Note:
1. when ever you see the API, look that whether it is POST api and get API, 
in post api, user is sending some data to insert in the db. So always dekh ke insert kro ki kya data insert krna hai 
db, so har cheez verify kro. 

2. While writing the GET apis, you are very sure that what are you sending back to the user. 
Try not over fetch everything.

--------------------------

MAKING RELATION BETWEEN 2 RELATIONS. 
This is kind of Join in SQL to populate the data or joining the 2 tables 
and in mongoose this ref and populate are the same thing 

CREATED THE REF (OR JOINS)
 {
    fromUserId: {
      type: mongoose.Schema.Types.ObjectId,
      required: true,
      ref: "User", //This will create reference of fromUserId, with the UserCollection, we can access everything from the User Collections.
    },
    toUserId: {
      type: mongoose.Schema.Types.ObjectId,
      required: true,
      ref: "User",
    },
}

userRouter.get("/user/connections", userAuth, async (req, res) => {
  try {
    const loggedInUser = req.user;
    /*
    Akshay => Elon =>Accepted
    Elon => Mark => accepted 

    means elon ko pass jo jo bhi aayi hai and elon ne jin jin ko bhji hai

    elon can be from user and toUser
    */
    const connectionRequests = await ConnectionRequest.find({
      $or: [
        { toUserId: loggedInUser._id, status: "accepted" },
        { fromUserId: loggedInUser._id, status: "accepted" },
      ],
    })
      .populate("fromUserId", [
        "firstName",
        "lastName",
        "gender",
        "skills",
        "about",
      ])
      .populate("toUserId", [
        "firstName",
        "lastName",
        "gender",
        "skills",
        "about",
      ]);

    const data = connectionRequests.map((row) => {
      if (row.fromUserId._id.toString() === loggedInUser._id.toString()) {
        return row.toUserId;
      }
      return row.fromUserId;
    });

    res.json({ data: data });
  } catch (error) {
    res.status(400).json({
      message: "Something went wrong " + error.message,
    });
  }
});