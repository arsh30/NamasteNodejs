ENCRYPTING PASSWORD:

So password should be store in Encrypted format (Hash password). it should not be visible in the database.
- create utiles (to add the helper function to validate all the data(eg: for signup) )
Eg:

const validator = require("validator");
const validateSignUpData = (req) => {
  const { firstName, lastName, emailId, password } = req.body;

  if (!firstName || !lastName) {
    throw new Error("Please Enter Name");
  } else if (!validator.isEmail(emailId)) {
    throw new Error("EmailId is not valid");
  } else if (!validator.isStrongPassword) {
    throw new Error("Please enter a strong password");
  }
};

module.exports = {
  validateSignUpData,
};

-----------------------------------

- To encrypt the password -> we will use bcrypt

app.post("/signup", async (req, res) => {
  try {
    //console.log(req.body); // but we will not able to read this, because body me text aa raha hai, so to read this, we need middleware that conver JSON to JS object ie express.json()

    //1. data validate
    validateSignUpData(req);

    const { firstName, lastName, emailId, password } = req.body;
    const passwordHash = await bcrypt.hash(password, 10); // 10 is basically a salt, jitne jyda round honge utna tough hoga password
    // - make sure agr 1 bar password hash hogya to its almost impossible decrypt the password again

    // 2. Encrypt password
    const user = new User({
      firstName,
      lastName,
      emailId,
      password: passwordHash, // saving the user with encrypted password 
    });

    await user.save();
    res.status(200).send("user added successfully");
  } catch (error) {
    res.status(400).send("Error: " + error.message);
  }
});

-------------------------------

LOGIN API WITH PASSWORD MATCHING... 

app.post("/login", async (req, res) => {
  try {
    const { emailId, password } = req.body;
    if (!validators.isEmail(emailId)) {
      throw new Error("EmailId is wrong");
    }
    const user = await User.findOne({ emailId: emailId });
    if (!user) {
      throw new Error("Invalid credentials");
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (isPasswordValid) {
      res.status(201).send("login successful!!!");
    } else {
      res.status(401).send("Invalid credentials");
    }
  } catch (error) {
    res.status(401).send("Error: " + error.message);
  }
});

-------------------------------- finish ------------------------------