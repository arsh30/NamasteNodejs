DEV TINDER (CODE STARTS BACKEND)

- how do you start building the project ? 
sol ) -> 1. we have to initialise the project -> (npm init)
     It creates a package.json file -> It is the configuration file which contains meta data, like name, version, dependencies, scipts etc
     [jbhi koi package install krte hai to vo idr include ho jata hai in dependencies]

2. create folder -> src -> app.js (app.js is the starting file)

    -> 1. 1st we need a server to handle incoming requests 
    - then we start listening that server so that we are accepting the incoming requests from outside world. 

    So Here we are using Express.js to create a server

    -> npm install express 

-------------------------------------

so when we install the first package, it creates package_lock.json file and node modules folder 

-> Node modules: when we install any package like express, all the code that written in that package comes into the node modules folder,
    and express is dependent on all packages, so unka bhi code idr aayega node modules me 


Note: we never push this to git, because its size is very large 
if we delete this - we can re generate this by writing -> npm install 


-> package-lock.json ->  
        in package.json:  "express": "^4.21.2", what is this carrot (^) -> 4.19.2 means (major changes, minor changes, patch update)
        - patch (means package me kuch minor sa change kiya hai like bug fix)
        - minor change (means pushing new minor feature in that package, but it is backward compatible, means ye package sab par work krega koi bhi project 4.x.x version use krra hai)
        Agr major update hua like 4.x.x to 5.x.x par shift krgye to it can break our application so humko dhyan se krna hoga dubara 

        
    So ^4.19.2 -> This means any update is available that is 4.x.x toh ye automatically hi update hojayega only patch updates done
        ~4.19.2 -> this will automatically do patch and minor update automatically
        4.19.2 -> agr ye likhege to exact version hi rhega fixed 


    So package.json me like version  ~4.19.2 aisa hoga, ye exact version nahi hai, exact version dekhna hai toh we can check that in 
    package_lock.json 

-----------------------------------------------------------------------

1. npm install -g nodemon => it is kind of live server jabhi kuch change krege to auto refresh hojayega 
    -> add script in package.json ->    "start": "nodemon src/app.js"


2. Code Till Now: 

src/app.js -> 

const express = require("express");

const app = express();

app.get("/", (req, res) => {
  // callback function is known as request handler
  // so jabhi / route hoga toh ye code run hoga
  res.send("Hello from dashboard");
});

app.get("/hello", (req, res) => {
  // /test -> means jabhi request is url par aayegi tab ye callback function/request handler chlega
  res.send("Hello world");
});
app.listen(3000, () => {
  console.log("Server is successfully listening on port:3000");
});

------------------------------------

Note:
If we will use like below, then the output will always come hello from server, because agr route '/' ke baad se start hora hai in app.use to kuch bhi ho / ke age same route pr redirect krega
Eg: app.use('/test', (req,res) => {}) ye agr krte to /test ke baad agr koi route add krte like /test/2121, toh ye sirf /test par hi redirect krta 

app.use is a middle ware function that matches all HTTP Request (GET, POST etc) and processes requests based on the provided route pattern.

Ex:
app.use('/', (req,res) => {
    res.send("hello from server")
})

app.use('/hello', (req,res) => {
    res.send("hello world")
})


Overall:
1. app.use() is generally used for middleware functions that apply to multiple routes or request types
2. The code will run from the top to bottom, order of writing the api will matter alot. 
For eg:

app.use("/hello/2", (req,res) => {})
app.use("/hello", (req,res) => {})
app.use("/test", (req,res) => {})

Then the output will be if write in url "/hello/2" => Then 1st wala will print 
If we write , "/hello" first and then "/hello/2" => and if search in url ("/hello/2") toh hello wala hi print hoga  
because /hello route match krgya hai ab uske aage kuch bhi ho agr toh toh vo wala chlega 


------------------------------------- finish ------------------------------------